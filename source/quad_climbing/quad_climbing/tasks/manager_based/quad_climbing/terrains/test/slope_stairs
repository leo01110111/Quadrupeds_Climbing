import numpy as np
import math
from scipy import interpolate
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

class Config:
    def __init__(self, size, horizontal_scale, vertical_scale, slope_range, platform_width):
        self.size = size
        self.horizontal_scale = horizontal_scale
        self.vertical_scale = vertical_scale
        self.slope_range = slope_range
        self.platform_width = platform_width


def pyramid_sloped_terrain(difficulty: float, cfg) -> np.ndarray:
    """Generate a terrain with a truncated pyramid structure.

    The terrain is a pyramid-shaped sloped surface with a slope of :obj:`slope` that trims into a flat platform
    at the center. The slope is defined as the ratio of the height change along the x axis to the width along the
    x axis. For example, a slope of 1.0 means that the height changes by 1 unit for every 1 unit of width.

    If the :obj:`cfg.inverted` flag is set to :obj:`True`, the terrain is inverted such that
    the platform is at the bottom.

    .. image:: ../../_static/terrains/height_field/pyramid_sloped_terrain.jpg
       :width: 40%

    .. image:: ../../_static/terrains/height_field/inverted_pyramid_sloped_terrain.jpg
       :width: 40%

    Args:
        difficulty: The difficulty of the terrain. This is a value between 0 and 1.
        cfg: The configuration for the terrain.

    Returns:
        The height field of the terrain as a 2D numpy array with discretized heights.
        The shape of the array is (width, length), where width and length are the number of points
        along the x and y axis, respectively.
    """
        
    slope = cfg.slope_range[0] + difficulty * (cfg.slope_range[1] - cfg.slope_range[0])

    # switch parameters to discrete units
    # -- horizontal scale
    width_pixels = int(cfg.size[0] / cfg.horizontal_scale)
    length_pixels = int(cfg.size[1] / cfg.horizontal_scale)
    # -- height
    # we want the height to be 1/2 of the width since the terrain is a pyramid
    height_max = int(slope * cfg.size[0] / 2 / cfg.vertical_scale)
    # -- center of the terrain
    center_x = int(width_pixels / 2)
    center_y = int(length_pixels / 2)

    # create a meshgrid of the terrain
    x = np.arange(0, width_pixels)
    y = np.arange(0, length_pixels)
    xx, yy = np.meshgrid(x, y, sparse=True)
    # offset the meshgrid to the center of the terrain
    xx = (center_x - np.abs(center_x - xx)) / center_x
    yy = (center_y - np.abs(center_y - yy)) / center_y
    # reshape the meshgrid to be 2D
    xx = xx.reshape(width_pixels, 1)
    yy = yy.reshape(1, length_pixels)
    # create a sloped surface
    hf_raw = np.zeros((width_pixels, length_pixels))
    hf_raw = height_max * xx * yy

    # create a flat platform at the center of the terrain
    platform_width = int(cfg.platform_width / cfg.horizontal_scale / 2)
    # get the height of the platform at the corner of the platform
    x_pf = width_pixels // 2 - platform_width
    y_pf = length_pixels // 2 - platform_width
    z_pf = hf_raw[x_pf, y_pf]
    hf_raw = np.clip(hf_raw, min(0, z_pf), max(0, z_pf))

    # round off the heights to the nearest vertical step
    return np.rint(hf_raw).astype(np.int16)

def main():
    # Instantiate Config
    cfg = Config(
        size=(8, 8),
        horizontal_scale=0.1, #(0 to inf)
        vertical_scale=0.5,   #(0,1]
        slope_range=(0.0, 0.5),
        platform_width=2,
    )

    # Generate height field
    hf = pyramid_sloped_terrain(1.0, cfg)

    # Create meshgrid for plotting
    x = np.linspace(0, cfg.size[0], hf.shape[0])
    y = np.linspace(0, cfg.size[1], hf.shape[1])
    X, Y = np.meshgrid(x, y)

    # Create 3D surface plot
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X, Y, hf, cmap='viridis')

    # Set fixed z-axis limits (e.g., based on expected height range)
    z_min = 0  # Adjust based on your data (e.g., cfg.noise_range[0])
    z_max = 8   # Adjust based on your data (e.g., cfg.noise_range[1] or slope-based max)
    ax.set_zlim(z_min, z_max)

    # Add labels and colorbar
    ax.set_xlabel('X (meters)')
    ax.set_ylabel('Y (meters)')
    ax.set_zlabel('Height (meters)')
    ax.set_title('Pyramid Ridges Terrain')
    fig.colorbar(surf, ax=ax, label='Height')

    # Show plot
    plt.show()

if __name__ == '__main__':
    main()